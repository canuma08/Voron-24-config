#####################################################################
#       PRINT START END PAUSE RESUME
#####################################################################

########PRINT_START##################################################   
[gcode_macro PRINT_START]

# For setting the parameters as persistent variables so they can be referenced in PRINT_START2
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
## variable_safe_z: 25
variable_printstart_fast: 0
variable_zcal_status: 0


#  {% set user = printer['gcode_macro _USER_VARIABLE'] %}

gcode:
    {action_respond_info("PRINT_START")}

	# Parameters
    {% set bed = params.BED|int %}
    {% set hotend = params.HOTEND|int %}
    {% set chamber = params.CHAMBER|default(0)|int %}
    {% set fl_size = params.SIZE|default("0_0_0_0")|string %}
	{% set z_hop = params.Z|default(15)|int %}
	{% set user = printer['gcode_macro _USER_VARIABLE'] %}
    {% set z_offset = params.ZOFFSET|default(0)|float %}
	{% set filament = params.FILAMENT|default(0)|string %}
	{% set svv = printer.save_variables.variables %}

# Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}   
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend} 
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=zcal_status VALUE=0
	M118 chamber target: {printer['gcode_macro PRINT_START'].chambertemp}, {chamber}


	CLEAR_PAUSE
	TEMP_QUERY
	STOP_DELAYED_GCODE
    RESET_SPEEDS																; reset speed, accel etc to configured values
	##LIGHTS PRESET=BUSY																	; https://github.com/samwiseg0/V2.2265_klipper_config/blob/main/config.d/macros.cfg
	##SET_BED_CONT TEMP={bed}                                                             ; https://github.com/samwiseg0/V2.2265_klipper_config/blob/main/config.d/macros.cfg
    ##FILAMENT_DETECT FILAMENT={params.FILAMENT} EVENT=START                              ; Run custom gcode based on filament being used https://github.com/samwiseg0/V2.2265_klipper_config/blob/main/config.d/macros.cfg

    CG28 																				; Conditional G28
	G21 																				; set units to mm
    G90                                                   								; use absolute coordinates
	M83                                                        							; relative extruder positioning
	M107
    G92 E0.0																			; reset extruder distance position
	BED_MESH_CLEAR       																; Clears old saved bed mesh (if any)
	PROBE_DOCK_UNLOCK
    ##NOZZLE_SWIPE
	G21																					; set units to mm                                                       						   ; use absolute coordinates
    M83                                                        							; relative extruder positioning
    G92 E0.0																			; reset extruder

	##{% if printer["temperature_sensor chamber"].temperature < chamber %}              	; - if chamber is not at temp yet:
	{% if printer['temperature_sensor chamber'].temperature < chamber or printer.heater_bed.temperature < (bed-2) %}
		M118 START_PRINT 1 Heating Chamber to: {chamber}
        HEATSOAK STATUS=HEATING S={bed + 5} C={chamber} MOVE=1 WAIT=1    				; heatsoak macro + park in center
		##M190 S{bed}                                                                 	; wait for bed final temp
    {% else %}                                                                          ; - if chamber is already at temp:
		M118 START_PRINT 2 Heating Chamber to: {chamber}
		HEATSOAK STATUS=HEATING S={bed + 5} C={chamber} MOVE=1 WAIT=1
		##M190 S{bed}                                                                 	; wait for bed final temp
    {% endif %}
	
	{% if printer['temperature_sensor chamber'].temperature >= chamber %}
		M118 Chamber at temp
		M140 S{bed}
	{% else %}	
		M118 Chamber still too cold
	{% endif %}	
		
	M107																				; part fan OFF
	PROBE_ATTACH_LOCK
	CQGL
	TEMPERATURE_WAIT SENSOR="temperature_sensor extruder" MINIMUM={hotend} 				; set & wait for hotend final temp	
	NOZZLE_CLEAN
    G28 Z 																				; home z                                                                              
    CALIBRATE_Z																			; absolute positioning
    M109 S{180}                                                                      	; set & wait for hotend final temp
	M118 Wait for Hotend
    BMC                                                                  				; mesh
    G0 Z25                                                                              ; hop up to prevent knocking probe off after homing Z
    PROBE_DOCK_UNLOCK                                                                   ; stow probe, unlock
	PARKBED
	G1 X176 Y154.85 Z100 F19500															; move to center of bed to prevent knocking probe off after homing Z (otherwise QGL just moves our Z hop down again before traveling)
    M109 S{hotend}                                                                      ; set & wait for hotend final temp
	NOZZLE_SWIPE
	PURGE_LINE_SHORT																	; Run a purge line right before the print
	G1 Z2.0 F3000                                                                       ; move Z Axis up
    ##SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                                 ; enable filament sensor

	##SET_Z_THERMAL_ADJUST ENABLE=0 													; calibrate z offset with hot nozzle  
	##TEMPADJUSTPA                                                                      ; change PA based on bed temp	; swipe nozzle brush on way to print purge line

    {action_respond_info("Start Printing")}

########PRINT_END####################################################
[gcode_macro PRINT_END]
gcode:
    {action_respond_info("PRINT_END...")}
	G1 E-0.4 F80
    G92 E0
	PARKREAR
    ##RESETRGB                                                                          ; revert LCD RGB
    ##SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                               ; disable filament sensor
    CLEAR_PAUSE                                                                         ; clear pause (from M191) if there is one
	#M191 S0                                                                            ; (TEST) disable bed fans
	M400                                                                                ; wait for buffer to clear
    {% if printer.heater_bed.temperature >= 100 %}                                       
		SET_FAN_SPEED FAN=BedFans SPEED=99                                              ; crank exhaust fan to 100% to evacuate chamber
    {% endif %}                                                 
    M104 S0                                                                           	; turn only the hotend off
    M140 S0													                            ; return the bed to temp, some slicers like to turn it off
    M107                                                                                ; turn off part cooling fan
    G90                                                                                 ; absolute positioning
	SET_FAN_SPEED FAN=BedFans SPEED=0.9
    UPDATE_DELAYED_GCODE ID=bedfan_start_loop DURATION=300                              ; turn exhaust off in 2 min
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=1800                                 	; turn everything off in 30 min
    RESETSPEEDS                                                                         ; reset speed, accel etc to configured max values
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0                                       ; disable XYE steppers (not z)
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    #BEEP I=3   														                ; beep 3 times
                                                              
########CANCEL_PRINT##################################################
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
	{action_respond_info("Running Macros CANCEL_PRINT...")}
	CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

########PAUSE_PRINT###################################################
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                  ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                             ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}   ; set hotend temp variable for reference in resume macro
                                
        ##SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                 ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                         ; save current print position for resume                
        BASE_PAUSE                                                                          ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}      ; check that zhop doesn't exceed z max
            G91                                                                             ; relative positioning
            G1 Z{z} F900                                                                    ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                 ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                 ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500 ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                     ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                             ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                      ; set timeout to 12 hours
    {% endif %}



########RESUME_PRINT###################################################
# Return Z hop back down, prime nozzle, resume print.
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        ##SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                                                              ; enable filament sensor
        RESETRGB                                                                                                         ; reset LCD color
        SET_LOGO_LEDS_BY_NAME COLOR="WHITE"                                                                              ; set logo LEDs back to white
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                      ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                                                            ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                                                         ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                                                              ; relative positioning
        M83                                                                                                              ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                             
            G1 Z{zhop * -1} E{e} F900                                                                                    ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                                                         ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=100                                                             ; restore position
        BASE_RESUME                                                                                                      ; resume print
    {% endif %}


# Filament runout / change alias    
[gcode_macro M600]
gcode:
    #LCDRGB R=0 G=1 B=0                  # Turn LCD green
    #SET_LOGO_LEDS_BY_NAME COLOR="GREEN" # Turn logo green
    #PAUSE

    
# Disable filament sensor 1 sec after startup, only enable during prints (in PRINT_START/PRINT_END, and in PAUSE/RESUME)
[delayed_gcode DISABLEFILAMENTSENSOR]   
initial_duration: 1
gcode:
    ##SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    
[save_variables]
filename: /home/pi/printer_data/logs/z_offset.log
#   Required - provide a filename that would be used to save the
#   variables to disk e.g. ~/variables.cfg


#####################################################################
#       SHELL COMMANDS
#####################################################################

# https://github.com/th33xitus/kiauh/wiki/How-to-autocommit-config-changes-to-github%3F
[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg
    
[gcode_shell_command backup_cfg]
command: sh /home/pi/autocommit.sh
timeout: 30.
verbose: True

[gcode_macro SHAPER_CAL]
gcode: 
    RUN_SHELL_COMMAND CMD=rem_res_data
    SHAPER_CALIBRATE AXIS=X FREQ_END=100
    SHAPER_CALIBRATE AXIS=Y FREQ_END=100
    RUN_SHELL_COMMAND CMD=gen_res_graph
    SAVE_CONFIG

[gcode_shell_command rem_res_data]
command: sh /home/pi/rem_res_data.sh
timeout: 30.
verbose: True

[gcode_shell_command gen_res_graph]
command: sh /home/pi/gen_res_graph.sh
timeout: 30.
verbose: True


########################################################################
#       MISC
########################################################################

########SHUTDOWN########################################################
# Calls my "OFF" macro to shut off everything (lights etc), turns off LCD lighting, then shuts down the Pi
[gcode_macro SHUTDOWN]
gcode:
    #LCDRGB R=0 G=0 B=0
    OFF
    {action_respond_info('action:poweroff')}          ; OctoPrint compatible
    {action_call_remote_method("shutdown_machine")}   ; Moonraker compatible

########HEATSOAK#########################################################
[gcode_macro HEATSOAK]
variable_target_temp: 0
variable_stage: 'none' 																; stages: heating -> soaking -> done -> none
variable_check_interval: 10															; in seconds
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    # Parameters
    {% set s = params.S|default(0)|int %}
    {% set c = params.C|default(0)|int %}
	{% set status = params.STATUS|default(0)|string %}
    {% set move = params.MOVE|default(1)|int %}
    {% set wait = params.WAIT|default(0)|int %}

	M118 HEATSOAK called with S={Ss}, C={c}, move={move}, wait={wait}, STATUS={status}
    SAVE_GCODE_STATE NAME=HEATSOAK
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0    ; cancel off timer (if there is one)
    ##SET_PIN PIN=caselight VALUE=1                     ; turn on case light
    M104 S0                                           ; turn off hotend
	M118 HEATSOAK calling M140 S={s}, C={c}, STATUS={status}
	M140 S{s} C{c} STATUS{status}                                   ; heat bed
    #M141 S{c}                                         ; (TEST) start bed fans 
    {% if move == 1 %}
        ##SET_LOGO_LEDS_BY_NAME COLOR=ORANGE            ; set logo to orange
        CG28
        G90
        G0 Z{printer.toolhead.axis_maximum.z/2} F19500    
        G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500    
    {% endif %}
    {% if c > 30 and wait == 1 %}
        #TEMPERATURE_WAIT SENSOR="heater_generic chamber" MINIMUM={c-10} ; (TEST) wait for chamber temp - 10C
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={c - 10} ; wait for chamber temp - 10C
    {% endif %}
    RESTORE_GCODE_STATE NAME=HEATSOAK

########M109############################################################
# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
    {action_respond_info("Macro M109")}
    #Parameters
    {% set s = params.S|float %}
    
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

########RESET_SPEEDS####################################################
[gcode_macro RESET_SPEEDS]
gcode:
    {action_respond_info("Reset Printer Limits...")}
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 
	M221 S100                                                                                                               ; Reset flow rate to 100%
    M220 S100                                                                                                               ; reset speed multiplier


########TEMPADJUST_PA###################################################
[gcode_macro TEMPADJUST_PA]
gcode:
	{action_respond_info("TEMPADJUSTPA")}
    # ABS
    {% if printer.heater_bed.target >= 100 %}
        SET_PRESSURE_ADVANCE ADVANCE=0.020
    ## PETG
    #{% elif printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
    #   SET_PRESSURE_ADVANCE ADVANCE=
    # PLA
    {% elif printer.heater_bed.target <= 65 %}
        SET_PRESSURE_ADVANCE ADVANCE=0.035
    # Catch-all
    {% else %}
        SET_PRESSURE_ADVANCE ADVANCE=0.055
    {% endif %}

########G32#############################################################
[gcode_macro G32]
gcode:
    {action_respond_info("Running G32...")}
    ##LIGHTS PRESET=PRINTING
    BED_MESH_CLEAR
    CG28
    QUAD_GANTRY_LEVEL
	BED_MESH_CALIBRATE
    G28 Z

########PURGE_LINE_SHORT###################################################
[gcode_macro PURGE_LINE_SHORT]
description: Extrude a purge line at 0,0,.35. Perams: NONE
gcode:
    {action_respond_info("PURGE_LINE_SHORT...")}
    SAVE_GCODE_STATE NAME=PURGE_LINE
    G90                 		; Absolute coordinates.
    M83                 		; Relative extruder mode.
    G92 E0						; reset extruder
	G1 X2 Y5 F7800              ; move to purge strip start position
    G1 Z1 F4000					
    G1 Z0.30 F4000              ; drop to 0.35 print height
    G1 E6.0 F300				; Spew a small puddle - cleans gunk
	G1 Z5 F8000					; lift 1 mm
	G1 X20 Y5 Z5 F8000			; move to purge line 1
	G1 X20 Y5 Z0.25 F5000		; drop to 0.25
	G1 X120 E10.0 F1000.0		; purge line 1
	G1 X120 Y6 F1000.0			; move to purge line 2
    G1 X20 E10 F1000.0          ; purge line 2
	G1 Z50 F8000				; lift
	G1 E-.4 F900                ; Retract some after purge line
    G92 E0.0                    ; reset extruder distance position
    RESTORE_GCODE_STATE NAME=PURGE_LINE
	PARKBED
    {action_respond_info("leaving Purge line...")}

########NOZZLE_CLEAN######################################################
[gcode_macro NOZZLE_CLEAN]
gcode:
	{action_respond_info("Running CLEANNOZZLE...")}
    # Parameters
	##variable_safe_z: 1
	{% set safe_z = params.SZ|default(25)|int %}
    # Iterations
    {% set i = params.I|default(5)|int %}
    # Speed
    {% set s = params.S|default(100)|int %}
    
    SAVE_GCODE_STATE NAME=CLEANNOZZLE

    G90                                                   				; absolute positioning
    G0 X42 Z{safe_z} Y{printer.toolhead.axis_maximum.y} F19500  		; move to right of nozzle brush
	G0 Z2   F19500                                        				; move down to nozzle brush
    {% for iteration in range(i|int) %}
        G0 X45 F{s*60}                                    				; wipe back
        G0 X100 F{s*60}                                   				; wipe forth
    {% endfor %}
    G0 X115 F{s*60}                                       				; wipe back
    G0 Z{safe_z} F19500                                         		; raise
    RESTORE_GCODE_STATE NAME=CLEANNOZZLE


########NOZZLE_SWIPE#####################################################    
[gcode_macro NOZZLE_SWIPE]
gcode:
	{action_respond_info("Running SWIPENOZZLE...")}
	#variable_safe_z: 0
	{% set safe_z = params.SZ|default(25)|int %}

		SAVE_GCODE_STATE NAME=SWIPENOZZLE
		G90                                                   				; absolute positioning
		G0 X42 Z{safe_z} Y{printer.toolhead.axis_maximum.y} F19500  		; move to right of nozzle brush
		G0 Z3   F19500                                        				; lower
		G0 X100 F2400                                         				; wipe back
		G0 Z{safe_z}  F19500                                        		; raise
		RESTORE_GCODE_STATE NAME=SWIPENOZZLE
		
	
#####################################################################
#       FILAMENT_SENSOR
#####################################################################

########FILAMENT_SENSOR_DISABLE######################################
[delayed_gcode FILAMENT_SENSOR_DISABLE]   		; Disable filament sensor 1 sec after startup, only enable during prints (in PRINT_START/PRINT_END/PAUSE/RESUME)
initial_duration: 1
gcode:
	{action_respond_info("Running FILAMENT_SENSOR_DISABLE...")}
    ##SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=UNLOADFILAMENT
    M83                                   		; set extruder to relative
    G1 E10 F600                           		; extrude a little to soften tip 
    G1 E-120 F1800                        		; retract filament completely
    RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=LOADFILAMENT
    M83 ; set extruder to relative
    G1 E90 F600
    RESTORE_GCODE_STATE NAME=LOADFILAMENT
   
[gcode_macro HOT_UNLOAD]
gcode:
    # Parameters
    {% set t = params.T|default(240)|int %}
    
    M104 S{t}
    PARKFRONT
    M109 S{t}
    UNLOAD_FILAMENT
    
[gcode_macro HOT_LOAD]
gcode:
    # Parameters
    {% set t = params.T|default(240)|int %}
    
    M104 S{t}
    PARKFRONT
    M109 S{t}
    LOAD_FILAMENT
    
#####################################################################
#       CONFIG BACKUP
#####################################################################

# https://github.com/th33xitus/kiauh/wiki/How-to-autocommit-config-changes-to-github%3F
[gcode_macro BACKUP]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg
    
[gcode_shell_command backup_cfg]
command: sh /home/pi/autocommit.sh
timeout: 30.
verbose: True



#####################################################################
#       FAN CONTROL MACROS
#####################################################################

[gcode_macro VOC_FAN]
description: Set VOC fan speed. Perams: S
gcode:
	{action_respond_info("Running VOC_FAN...")}
    {% set fanSpeed = params.S|default(50)|float / 100 %}
    
    {action_respond_info("VOC fan speed set to %.0f%%" % (fanSpeed * 100))}
    SET_FAN_SPEED FAN=VOC_Fan SPEED={fanSpeed}


#####################################################################
#       CONDITIONAL HOMING
#####################################################################

[gcode_macro XYCG28]
description: Conditionally home XY if has not been homed before Perams: NONE
gcode:
    {% if "xy" not in printer.toolhead.homed_axes %}
        G28 X Y
    {% endif %}

[gcode_macro ZCG28]
description: Conditionally home Z if has not been homed before Perams: NONE
gcode:
    {% if "z" not in printer.toolhead.homed_axes %}
        G28 Z
    {% endif %}

[gcode_macro CG28]
description: Conditionally home XYZ if has not been homed before Perams: NONE
gcode:
    {action_respond_info("CG28")}
    {% if "xyz" not in printer.toolhead.homed_axes %}
        {action_respond_info("Full G28, printer not been homed. CURRENT STATE: %s" % (printer.toolhead.homed_axes))}
        ## LIGHTS PRESET=BUSY                                                                                                  ; Turn on the lights and set to busy
        G28                                                                                                                 ; Home All Axes
    {% else %}
        {action_respond_info("Printer homed. CURRENT STATE: %s" % (printer.toolhead.homed_axes))}
    {% endif %}


#####################################################################
#       CONDITIONAL HOMING
#####################################################################

[gcode_macro CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            G28 ; home if not already homed
        {% endif %}
        QUAD_GANTRY_LEVEL
        G28 Z
    {% endif %}

#####################################################################
#       MISC
#####################################################################



# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
    {action_respond_info("Macro M109")}
    #Parameters
    {% set s = params.S|float %}
    
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro AG32]
gcode:
    {action_respond_info("Running Adaptive G32...")}
    ##LIGHTS PRESET=BUSY                                                                                                      ; Set lights to busy
    BED_MESH_CLEAR
    CG28
    QUAD_GANTRY_LEVEL

[gcode_macro G32]
gcode:
    {action_respond_info("Running G32...")}
    ##LIGHTS PRESET=PRINTING
    BED_MESH_CLEAR
    CG28
    QUAD_GANTRY_LEVEL
	BED_MESH_CALIBRATE
    G28 Z
	

[gcode_macro RESET_SPEEDS]
gcode:
    {action_respond_info("Reset Printer Limits...")}
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 
	M221 S100                                                                                                               ; Reset flow rate to 100%
    M220 S100                                                                                                               ; reset speed multiplier


[gcode_macro PID_CAL_Bed]
gcode:
	PID_CALIBRATE HEATER=heater_bed TARGET=115


[gcode_macro PID_CAL_Hotend]
gcode:
	PID_CALIBRATE HEATER=extruder TARGET=115


[gcode_macro STOP_DELAYED_GCODE]
description: Stop defined delayed gcode Perams: NONE
gcode:
    {action_respond_info("Stopping all DELAYED GCODE...")}
    ##UPDATE_DELAYED_GCODE ID=DELAYED_IDLE_LIGHTS DURATION=0
    ##UPDATE_DELAYED_GCODE ID=DELAYED_FANS_OFF DURATION=0
    ##UPDATE_DELAYED_GCODE ID=DELAYED_MCU_OFF DURATION=0
    ##UPDATE_DELAYED_GCODE ID=DELAYED_LIGHTS_OFF DURATION=0
    ##UPDATE_DELAYED_GCODE ID=PRINT_COOLDOWN_LOOP DURATION=0
    ##UPDATE_DELAYED_GCODE ID=DELAYED_DISABLE_STEPPERS DURATION=0
    ##UPDATE_DELAYED_GCODE ID=READY_TO_PRINT_LOOP DURATION=0
	UPDATE_DELAYED_GCODE ID=bedfan_start_loop DURATION=0
	UPDATE_DELAYED_GCODE ID=chamber_temp_control_loop DURATION=0


[gcode_macro TEMP_QUERY]

gcode:
	M118 TEMP_QUERY_C 
	##{% set device = params.D|string %}
	{% set bed_Tact = printer["heater_bed"].temperature|int %}
	{% set hotend_Tact = printer["extruder"].temperature|int %}
	{% set chamber_Tact = printer["temperature_sensor chamber"].temperature|int %}
	##SET_GCODE_VARIABLE MACRO=TEMP_QUERY_C VARIABLE=chamber_Tact VALUE={printer["temperature_sensor chamber_"].temperature|int}
	M118 Bed={bed_Tact} 
	M118 Hotend={hotend_Tact} 
	M118 Chamber={chamber_Tact} 
	

[gcode_macro M486]
gcode:
	# Parameters known to M486 are as follows:
	#   [C<flag>] Cancel the current object
	#   [P<index>] Cancel the object with the given index
	#   [S<index>] Set the index of the current object.
	#       If the object with the given index has been canceled, this will cause
	#       the firmware to skip to the next object. The value -1 is used to
	#       indicate something that isn’t an object and shouldn’t be skipped.
	#   [T<count>] Reset the state and set the number of objects
	#   [U<index>] Un-cancel the object with the given index. This command will be
	#       ignored if the object has already been skipped

	{% if 'exclude_object' not in printer %}
		{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}

	{% if 'T' in params %}
		EXCLUDE_OBJECT RESET=1
		{% for i in range(params.T | int) %}
			EXCLUDE_OBJECT_DEFINE NAME={i}
		{% endfor %}
	{% endif %}

	{% if 'C' in params %}
		EXCLUDE_OBJECT CURRENT=1
	{% endif %}

	{% if 'P' in params %}
		EXCLUDE_OBJECT NAME={params.P}
	{% endif %}

	{% if 'S' in params %}
		{% if params.S == '-1' %}
			{% if printer.exclude_object.current_object %}
				EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
			{% endif %}
		{% else %}
			EXCLUDE_OBJECT_START NAME={params.S}
		{% endif %}
	{% endif %}

	{% if 'U' in params %}
		EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}


[gcode_macro BEEP]
gcode:
	{action_respond_info("executing BEEP")}
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
        G4 P{dur}
        SET_PIN PIN=beeper VALUE=0
        G4 P{dur}
    {% endfor %}

####################################################################    
######################### LCD RGB CONTROLS #########################
####################################################################

# Set LCD RGB at startup
[delayed_gcode SETDISPLAYNEOPIXEL]
initial_duration: 1
gcode:
    ##RESETRGB
    
# Default RGB
[gcode_macro RESETRGB]
gcode:
    SET_LED LED=lcd RED=1 GREEN=0.45 BLUE=0.4 INDEX=1 TRANSMIT=0
    SET_LED LED=lcd RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=2 TRANSMIT=0
    SET_LED LED=lcd RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=3

# Example LCDRGB R=1 G=0.5 B=0
[gcode_macro LCDRGB]
gcode:
    {% set r = params.R|default(1)|float %}
    {% set g = params.G|default(1)|float %}
    {% set b = params.B|default(1)|float %}

    SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=1 TRANSMIT=0
    SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=2 TRANSMIT=0
    SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=3
    
  
######################### PARKING #########################

# Park front center
[gcode_macro PARKFRONT]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500        
    RESTORE_GCODE_STATE NAME=PARKFRONT
    
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F19500                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT
    
# Park top rear left
[gcode_macro PARKREAR]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKREAR
    G90
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500    
    RESTORE_GCODE_STATE NAME=PARKCENTER
    
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKBED
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z100 F19500                                     
    RESTORE_GCODE_STATE NAME=PARKBED
    
######################### ALIASES/SHORTCUTS #########################

    
[gcode_macro BMC]
gcode:
	{action_respond_info("BMC")}
    BED_MESH_CALIBRATE
	G28 Z

[gcode_macro QGL]
gcode:
    {action_respond_info("QGL")}
    CG28
    BED_MESH_CLEAR
    QUAD_GANTRY_LEVEL
    G28 Z

[gcode_macro Z_CAL]
gcode:
	CALIBRATE_Z
	
[delayed_gcode EXHAUST_OFF]
gcode:
	{action_respond_info("Running EXHAUST_OFF...")}
    ##SET_FAN_SPEED FAN=Exhaust SPEED=0

[delayed_gcode DELAYED_OFF]
gcode:
	{action_respond_info("Running DELAYED_OFF...")}
    OFF ; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)


# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
## [gcode_macro OFF]
## gcode:
##     M84                                  ; turn steppers off
##     TURN_OFF_HEATERS                     ; turn bed / hotend off
##	   M141 S0                              ; (TEST) turn off bed fans
##     M107                                 ; turn print cooling fan off
##     SET_FAN_SPEED FAN=Exhaust SPEED=0    ; turn exhaust fan off
##     SET_FAN_SPEED FAN=BedOuter SPEED=0   ; bed fan off
##     SET_FAN_SPEED FAN=BedInner SPEED=0   ; bed fan off
##     SET_PIN PIN=caselight VALUE=0        ; turn light off
    
######################### TESTING #########################

# Dump all Klipper parameters to terminal, helps find names and values of variables for use in macros

[gcode_macro DUMP_PARAMETERS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}

[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}

#####################################################################
#       BED MESH
#####################################################################

# # # Klipper Adaptive Meshing # # #

# Heads up! If you have any other BED_MESH_CALIBRATE macros defined elsewhere in your config, you will need to comment out / remove them for this to work. (Klicky/Euclid Probe)
# You will also need to be sure that [exclude_object] is defined in printer.cfg, and your slicer is labeling objects.
# This macro will parse information from objects in your gcode to define a min and max mesh area to probe, creating an adaptive mesh!
# This macro will not increase probe_count values in your [bed_mesh] config. If you want richer meshes, be sure to increase probe_count. We recommend at least 5,5.

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE

### This section allows control of status LEDs your printer may have.

variable_led_enable: False              # Enables/disables the use of status LEDs in this macro.
variable_status_macro: 'status_meshing' # If you have status LEDs in your printer (StealthBurner), you can use the macro that changes their status here.

### This section configures mesh point fuzzing, which allows probe points to be varied slightly if printing multiples of the same G-code file.

variable_fuzz_enable: True             # Enables/disables the use of mesh point fuzzing to slightly randomize probing points to spread out wear on a build surface, default is False.
variable_fuzz_min: 0                    # If enabled, the minimum amount in mm a probe point can be randomized, default is 0.
variable_fuzz_max: 4                    # If enabled, the maximum amount in mm a probe point can be randomized, default is 4.

### This section is for those using a dockable probe that is stored outside of the print area. ###

variable_probe_dock_enable: False       # Enables/disables the use of a dockable probe that is stored outside of the print area, default is False.
variable_attach_macro: 'Probe_Attach'   # Here is where you define the macro that ATTACHES the probe to the printhead. E.g. 'Attach_Probe'
variable_detach_macro: 'Probe_Dock'     # Here is where you define the macro that DETACHES the probe from the printhead. E.g. 'Dock_Probe'

gcode:
	{action_respond_info("Adaptive Bed Mesh...")}
	    _CheckProbe action=query
	G90
    Probe_Attach
    _KLICKY_STATUS_MESHING
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
    {% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
    {% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
    {% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
    {% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
    {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
    {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
    {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
    {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
    
    { action_respond_info("{} object points, clamping to bed mesh [{!r} {!r}]".format(
        all_points | count,
        bed_mesh_min,
        bed_mesh_max,
    )) }

    {% if fuzz_enable == True %}
        {% set fuzz_range = range(fuzz_min * 100 | int, fuzz_max * 100 | int + 1) %}
        {% set x_min = (bed_mesh_min[0] + fuzz_max, x_min) | max - (fuzz_range | random / 100.0) %}
        {% set y_min = (bed_mesh_min[1] + fuzz_max, y_min) | max - (fuzz_range | random / 100.0) %}
        {% set x_max = (bed_mesh_max[0] - fuzz_max, x_max) | min + (fuzz_range | random / 100.0) %}
        {% set y_max = (bed_mesh_max[1] - fuzz_max, y_max) | min + (fuzz_range | random / 100.0) %}
    {% else %}
        {% set x_min = [ bed_mesh_min[0], x_min ] | max %}
        {% set y_min = [ bed_mesh_min[1], y_min ] | max %}
        {% set x_max = [ bed_mesh_max[0], x_max ] | min %}
        {% set y_max = [ bed_mesh_max[1], y_max ] | min %}
    {% endif %}
   
    { action_respond_info("Object bounds, clamped to the bed_mesh: {!r}, {!r}".format(
        (x_min, y_min), 
        (x_max, y_max),
    )) }
    
    {% set points_x = (((x_max - x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
    {% set points_y = (((y_max - y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
    
    {% if (([points_x, points_y]|max) > 6) %}
        {% set algorithm = "bicubic" %}
        {% set min_points = 4 %}
    {% else %}
        {% set algorithm = "lagrange" %}
        {% set min_points = 3 %}
    {% endif %}
    { action_respond_info( "Algorithm: {}".format(algorithm)) }
    
    {% set points_x = [points_x, min_points]|max  %}
    {% set points_y = [points_y, min_points]|max  %}
    { action_respond_info( "Points: x: {}, y: {}".format(points_x, points_y) ) }

    {% if printer.configfile.settings.bed_mesh.relative_reference_index is defined %}
        {% set ref_index = (points_x * points_y / 2) | int %}
        { action_respond_info( "Reference index: {}".format(ref_index) ) }  
    {% else %}
        {% set ref_index = -1 %}
    {% endif %}

    {% if probe_dock_enable == True %}
        {attach_macro}              # Attach/deploy a probe if the probe is stored somewhere outside of the print area
    {% endif %}

    {% if led_enable == True %}
        {status_macro}              # Set status LEDs
    {% endif %}

    _BED_MESH_CALIBRATE mesh_min={x_min},{y_min} mesh_max={x_max},{y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y} RELATIVE_REFERENCE_INDEX={ref_index}

    {% if probe_dock_enable == True %}
        {detach_macro}              # Detach/stow a probe if the probe is stored somewhere outside of the print area
    {% endif %}
	
	Probe_Dock


# # # Klipper Adaptive Purging - VoronDesign Logo # # #

# This macro will parse information from objects in your gcode to define a min and max area, creating a nearby purge with Voron flair!
# For successful purging, you may need to configure:
# 
# [extruder]
# .
# .
# max_extrude_cross_section: 5


[gcode_macro ADAPTIVE_PURGE]
description: A purge macro that adapts to be near your actual printed objects

variable_adaptive_enable: True      # Change to False if you'd like the purge to be in the same spot every print
variable_z_height: 0.4              # Height above the bed to purge
variable_tip_distance: 10           # Distance between filament tip and nozzle before purge (this will require some tuning)
variable_purge_amount: 40           # Amount of filament to purge
variable_flow_rate: 10              # Desired flow rate in mm3/s
variable_x_default: 10              # X location to purge, overwritten if adaptive is True
variable_y_default: 10              # Y location to purge, overwritten if adaptive is True
variable_size: 10                   # Size of the logo
variable_distance_to_object_x: 10   # Distance in x to the print area
variable_distance_to_object_y: 10   # Distance in y to the print area

gcode:
    {% if adaptive_enable == True %}
        {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
        {% set x_origin = (all_points | map(attribute=0) | min | default(x_default + distance_to_object_x + size)) - distance_to_object_x - size %}
        {% set y_origin = (all_points | map(attribute=1) | min | default(y_default + distance_to_object_y + size)) - distance_to_object_y - size %}
        {% set x_origin = ([x_origin, 0] | max) %}
        {% set y_origin = ([y_origin, 0] | max) %}
    {% else %}
        {% set x_origin = x_default | float %}
        {% set y_origin = y_default | float %}
    {% endif %}
    {% set purge_move_speed = 2.31 * size * flow_rate / (purge_amount * 2.405) %}
    {% set prepurge_speed = flow_rate / 2.405 %}
    {% set travel_speed = printer.toolhead.max_velocity %}
    { action_respond_info( "x: " + x_origin|string + " y: " + y_origin|string + " purge_move_speed: " + purge_move_speed|string + " prepurge_speed: " + prepurge_speed|string ) }

    G92 E0
    G0 F{travel_speed*60}                                                               # Set travel speed
    G90                                                                                 # Absolute positioning
    G0 X{x_origin} Y{y_origin+size/2}                                                   # Move to purge position
    G0 Z{z_height}                                                                      # Move to purge Z height
    M83                                                                                 # Relative extrusion mode
    G1 E{tip_distance} F{prepurge_speed*60}                                             # Move tip of filament to nozzle
    G1 X{x_origin+size*0.289} Y{y_origin+size} E{purge_amount/4} F{purge_move_speed*60} # Purge first line of logo
    G1 E-.5 F2100                                                                       # Retract
    G0 Z{z_height*2}                                                                    # Z hop
    G0 X{x_origin+size*0.789} Y{y_origin+size}                                          # Move to second purge line origin
    G0 Z{z_height}                                                                      # Move to purge Z height
    G1 E.5 F2100                                                                        # Recover
    G1 X{x_origin+size*0.211} Y{y_origin} E{purge_amount/2} F{purge_move_speed*60}      # Purge second line of logo
    G1 E-.5 F2100                                                                       # Retract
    G0 Z{z_height*2}                                                                    # Z hop
    G0 X{x_origin+size*0.711} Y{y_origin}                                               # Move to third purge line origin
    G0 Z{z_height}                                                                      # Move to purge Z height
    G1 E.5 F2100                                                                        # Recover
    G1 X{x_origin+size} Y{y_origin+size/2}  E{purge_amount/4} F{purge_move_speed*60}    # Purge third line of logo
    G1 E-.5 F2100                                                                       # Retract
    G92 E0                                                                              # Reset extruder distance
    M82                                                                                 # Absolute extrusion mode
    G0 Z{z_height*2}                                                                    # Z hop



