#####################################################################
#       PRINT START END PAUSE RESUME
#####################################################################
   
[gcode_macro PRINT_START]
# For setting the parameters as persistent variables so they can be referenced in PRINT_START2
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
#  {% set user = printer['gcode_macro _USER_VARIABLE'] %}

gcode:
    {action_respond_info("PRINT_START...")}
    # Parameters
    {% set bed = params.BED|int %}
    {% set hotend = params.HOTEND|int %}
    {% set chamber = params.CHAMBER|default(0)|int %}
    {% set fl_size = params.SIZE|default("0_0_0_0")|string %}
	{% set z_hop = params.Z|default(15)|int %}
	{% set user = printer['gcode_macro _USER_VARIABLE'] %}
    ## {% set offset = params.ZOFFSET|default(0)|float %}
	## {% set filament = params.FILAMENT|default(0)|string %}
	
    # Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}   
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend} 
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}
	SET_IDLE_TIMEOUT TIMEOUT=14400

	Temp_Query
	M118 Bed={bed_Tact} / {bed} 
	M118 Hotend={hotend_Tact} / {hotend}
	M118 Chamber={chamber_Tact} / {chamber}
	
##	#M118 PRINT START/UPDATE_DELAYED_GCODE")}
##	UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=0              						; cancel exhaust off timer (if there is one)
##  UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0              						; cancel off timer (if there is one)

    ##SET_PIN PIN=caselightVALUE=1                                                      ; turn on case light
    RESETSPEEDS																			; reset speed, accel etc to configured values
	##RESETRGB                                                    						; reset LCD RGB
	M104 S180                                                   						; set hotend to no-ooze temp
	M140 S{bed}                                                 						; set bed to target temp
    G90
    CG28                                                        						; Conditional G28
    SWIPENOZZLE
	G21                                                         						; set units to mm                                                       						   ; use absolute coordinates
    M83                                                        							; relative extruder positioning
    G92 E0.0
    PARKBED                                                								; 
    {% if printer["temperature_sensor chamber"].temperature < chamber %}                ; - if chamber is not at temp yet:
		{action_respond_info("waiting for CHAMBER temp: {chamber}")}
        HEATSOAK T={bed + 5} MOVE=1                                                     ; heatsoak macro + park in center
        M190 S{bed + 5}                                                                 ; wait for bed final temp
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chamber - 2}      ; wait for chamber final temp
		M190 S{bed}
    {% else %}                                                                          ; - if chamber is already at temp:
        {% if printer.heater_bed.temperature < (bed - 2) %}                             ; -- but bed is not fully heated (within 2C):
            HEATSOAK T={bed} MOVE=1                                                  	; heatsoak and park
            M190 S{bed}                                                                 ; wait for bed final temp
        {% else %}                                                                      ; -- and bed is already heated:
            HEATSOAK T={bed} MOVE=0                                                  	; "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
        {% endif %}
    {% endif %}	
##	M106 S0                                                                             ; turn off part cooling fan (from heatsoak)
	QGL
    G90                                                                                 ; absolute positioning
    G0 Z15                                                                              ; hop up to prevent knocking probe off after homing Z
    BMC                                                                  ; mesh
    G28 Z                                                                               ; home z again
    G0 Z15                                                                              ; hop up to prevent knocking probe off after homing Z
    PROBE_DOCK_UNLOCK                                                                   ; stow probe, unlock
	PARKBED
    M109 S{hotend}                                                                      ; set & wait for hotend final temp
    CALIBRATE_Z
	SET_Z_THERMAL_ADJUST ENABLE=0 																					; calibrate z offset with hot nozzle  
	##  TEMPADJUSTPA                                                                    ; change PA based on bed temp	; swipe nozzle brush on way to print purge line
    ##SET_FAN_SPEED FAN=Exhaust SPEED=0.1                                               ; set chamber fan to 10%
    ##SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                               ; enable filament sensor	
	##SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=8
	##SET_PRESSURE_ADVANCE ADVANCE=0.040
    PURGE_LINE_SHORT                                                 					; Run a purge line right before the print
    {action_respond_info("Start Printing")}

[gcode_macro PRINT_END]
gcode:
    {action_respond_info("PRINT_END...")}
	G1 E-0.4 F80
    G92 E0
	PARKREAR
    ##RESETRGB                                                                          ; revert LCD RGB
    ##SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                               ; disable filament sensor
    CLEAR_PAUSE                                                                         ; clear pause (from M191) if there is one
	M400                                                                                ; wait for buffer to clear
    {% if printer.heater_bed.temperature >= 100 %}                                       
		SET_FAN_SPEED FAN=BedFans SPEED=99                                              ; crank exhaust fan to 100% to evacuate chamber
    {% endif %}                                                 
    M104 S0                                                                           	; turn only the hotend off
    M140 S0													                            ; return the bed to temp, some slicers like to turn it off
    M107                                                                                ; turn off part cooling fan
    G90                                                                                 ; absolute positioning
	SET_FAN_SPEED FAN=BedFans SPEED=0.99
    UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=300                                  	; turn exhaust off in 2 min
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=1800                                 	; turn everything off in 30 min
    RESETSPEEDS                                                                         ; reset speed, accel etc to configured max values
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0                                       ; disable XYE steppers (not z)
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    #BEEP I=3   														                ; beep 3 times
                                                              

[gcode_macro TEMPADJUSTPA]
gcode:
	{action_respond_info("TEMPADJUSTPA")}
    # ABS
    {% if printer.heater_bed.target >= 100 %}
        SET_PRESSURE_ADVANCE ADVANCE=0.020
    ## PETG
    #{% elif printer.heater_bed.target > 65 and printer.heater_bed.target < 100 %}
    #   SET_PRESSURE_ADVANCE ADVANCE=
    # PLA
    {% elif printer.heater_bed.target <= 65 %}
        SET_PRESSURE_ADVANCE ADVANCE=0.035
    # Catch-all
    {% else %}
        SET_PRESSURE_ADVANCE ADVANCE=0.055
    {% endif %}


[gcode_macro PURGE_LINE_SHORT]
description: Extrude a purge line at 0,0,.35. Perams: NONE
gcode:
    {action_respond_info("PURGE_LINE_SHORT...")}
    SAVE_GCODE_STATE NAME=PURGE_LINE
    G90                 		; Absolute coordinates.
    M83                 		; Relative extruder mode.
    G92 E0						; reset extruder
	G1 X2 Y4 F7800              ; move to purge strip start position
    G1 Z1 F4000					
    G1 Z0.30 F4000              ; drop to 0.35 print height
    G1 E6.0 F300				; Spew a small puddle - cleans gunk
	G1 Z5 F8000					; lift 1 mm
	G1 X20 Y4 Z5 F8000			; move to purge line 1
	G1 X20 Y4 Z0.25 F5000		; drop to 0.25
	G1 X120 E10.0 F1000.0		; purge line 1
	G1 X120 Y5 F1000.0			; move to purge line 2
    G1 X20 E10 F1000.0          ; purge line 2
	G1 Z50 F8000				; lift
	G1 E-.4 F900                ; Retract some after purge line
    G92 E0.0                    ; reset extruder distance position
    RESTORE_GCODE_STATE NAME=PURGE_LINE
	PARKBED
    {action_respond_info("leaving Purge line...")}


[gcode_macro PURGE_LINE_TEST]
description: Extrude a purge line at 0,0,.35. Perams: NONE
variable_feed: 10

gcode:
    SAVE_GCODE_STATE NAME=BASE_TEST_PURGE_LINE
    # Parameters
    {% set count = params.COUNT|default(1)|int %}
	{% set step = params.COUNT|default(1)|int %}
	{% set length = params.LENGTH|default(200)|int %}
	{% set speed = params.SPEED|default(1000)|int %}
	{% set feed = params.FEED|default(0)|int %}
	{% set feed_max = params.FEED|default(0.64)|float %}
	{% set x = params.X|default(5)|int %}
	{% set y = params.Y|default(5)|int %}

    {action_respond_info("Running Purge line...")}

	SET_GCODE_VARIABLE MACRO=PURGE_LINE VARIABLE=feed VALUE={feed + length * 0.64 / 2.4052 / 2}

	#M118 Purge count= {count}
	#M118 Purge length= {length}
	#M118 Purge speed= {speed} 
	#M118 Purge feed= {feed}
	M118 Purge E= {length * 0.64 / 2.4052 / 2}
	
    G90                 											; Absolute coordinates.
    M83                 											; Relative extruder mode.
    G92 E0															; set extruder to 0
	G1 X2 Y2 F7800                                              	; move to purge strip start position
	G1 Z0.4 F7800                                              		; drop to 0.4 print height
	G1 E6.0 F300													; Spew a small puddle - cleans gunk
	G1 X{x} Y{y} F7800												; move to purge line 1 start position
	G1 Z0.25 F7800													; drop to 0.25 print height

	{% for step in range(count|int) %}
		M118 Line = {step + 1}
		#M118 Y target = {y + step * 2}
		#M118 X target = {x + length / 2}		
 		G1 Y{y + step * 2}
		G1 X{x + length / 2} E{feed} F{speed}                      ; purge forward
		#G1 X{x + length / 2} F{speed}
		#M118 Y target = {y + step * 2 + 1}
		#M118 X target = {x}	
 		G1 Y{y + step * 2 + 1}
 		G1 X{x} Y{y + step * 2 + 1} E{feed} F{speed}				; purge backward
		#G1 X{x} Y{y + step * 2 + 1} F{speed}	
	{% endfor %}

	G1 Z25 F7800
	G1 E-1 F1500                                                 	; Retract some after purge line
    G92 E0.0                                                     	; reset extruder distance position
    RESTORE_GCODE_STATE NAME=BASE_TEST_PURGE_LINE  
    {action_respond_info("leaving Purge line...")}


[delayed_gcode EXHAUST_OFF]
gcode:
	{action_respond_info("Running EXHAUST_OFF...")}
    ##SET_FAN_SPEED FAN=Exhaust SPEED=0

[delayed_gcode DELAYED_OFF]
gcode:
	{action_respond_info("Running DELAYED_OFF...")}
    OFF ; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)
    
[gcode_macro CLEANNOZZLE]
gcode:
	{action_respond_info("Running CLEANNOZZLE...")}
    # Parameters
	##variable_safe_z: 0
	{% set safe_z = params.SZ|default(25)|int %}
    # Iterations
    {% set i = params.I|default(5)|int %}
    # Speed
    {% set s = params.S|default(100)|int %}
    
    CG28
    SAVE_GCODE_STATE NAME=CLEANNOZZLE
    G90                                                   				; absolute positioning
    G0 X42 Z{safe_z} Y{printer.toolhead.axis_maximum.y} F19500  		; move to right of nozzle brush
	G0 Z0   F19500                                        				; move down to nozzle brush
    {% for iteration in range(i|int) %}
        G0 X45 F{s*60}                                    				; wipe back
        G0 X100 F{s*60}                                   				; wipe forth
    {% endfor %}
    G0 X115 F{s*60}                                       				; wipe back
    G0 Z{safe_z} F19500                                         		; raise
    RESTORE_GCODE_STATE NAME=CLEANNOZZLE
    
[gcode_macro SWIPENOZZLE]
gcode:
	{action_respond_info("Running SWIPENOZZLE...")}
	#variable_safe_z: 0
	{% set safe_z = params.SZ|default(25)|int %}
    CG28
    SAVE_GCODE_STATE NAME=SWIPENOZZLE
    G90                                                   				; absolute positioning
    G0 X42 Z{safe_z} Y{printer.toolhead.axis_maximum.y} F19500  		; move to right of nozzle brush
    G0 Z0   F19500                                        				; lower
    G0 X100 F2400                                         				; wipe back
    G0 Z{safe_z}  F19500                                        		; raise
    RESTORE_GCODE_STATE NAME=SWIPENOZZLE

######################### PAUSE/RESUME/CANCEL #########################
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
	{action_respond_info("Running Macros CANCEL_PRINT...")}
	CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

# Pause and park toolhead at front center. Z hop by 25mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
	{action_respond_info("Running Macros PAUSE...")}    # Parameters
    {% set z = params.Z|default(25)|int %}                                                  ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                             ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}   ; set hotend temp variable for reference in resume macro
                                
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                 ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                         ; save current print position for resume                
        BASE_PAUSE                                                                          ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}      ; check that zhop doesn't exceed z max
            G91                                                                             ; relative positioning
            G1 Z{z} F900                                                                    ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                 ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                 ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500 ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                     ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                             ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                      ; set timeout to 12 hours
    {% endif %}

# Return Z hop back down, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
	{action_respond_info("Running Macros RESUME...")}
    # Parameters
    {% set e = params.E|default(2.5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                                                              ; enable filament sensor
        ##RESETRGB                                                                                                         ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                      ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                                                            ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                                                         ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                                                              ; relative positioning
        M83                                                                                                              ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                             
            G1 Z{zhop * -1} E{e} F900                                                                                    ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                                                         ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=100                                                             ; restore position
        BASE_RESUME                                                                                                      ; resume print
    {% endif %}

#####################################################################
#       FILAMENT
#####################################################################

# Disable filament sensor 1 sec after startup, only enable during prints (in PRINT_START/PRINT_END, and in PAUSE/RESUME)
[delayed_gcode DISABLEFILAMENTSENSOR]   
initial_duration: 1
gcode:
	{action_respond_info("Running DISABLEFILAMENTSENSOR...")}
    ##SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    
#####################################################################
#       CONFIG BACKUP
#####################################################################

# https://github.com/th33xitus/kiauh/wiki/How-to-autocommit-config-changes-to-github%3F
#[gcode_macro BACKUP_CFG]
#gcode:
#    RUN_SHELL_COMMAND CMD=backup_cfg
#    
#[gcode_shell_command backup_cfg]
#command: sh /home/pi/gitbackup.sh
#timeout: 30.
#verbose: True


#####################################################################
#       FAN CONTROL MACROS
#####################################################################

[gcode_macro VOC_FAN]
description: Set VOC fan speed. Perams: S
gcode:
	{action_respond_info("Running VOC_FAN...")}
    {% set fanSpeed = params.S|default(50)|float / 100 %}
    
    {action_respond_info("VOC fan speed set to %.0f%%" % (fanSpeed * 100))}
    SET_FAN_SPEED FAN=VOC_Fan SPEED={fanSpeed}

#####################################################################
#       CONDITIONAL HOMING
#####################################################################

[gcode_macro XYCG28]
description: Conditionally home XY if has not been homed before Perams: NONE
gcode:
    {% if "xy" not in printer.toolhead.homed_axes %}
        G28 X Y
    {% endif %}

[gcode_macro ZCG28]
description: Conditionally home Z if has not been homed before Perams: NONE
gcode:
    {% if "z" not in printer.toolhead.homed_axes %}
        G28 Z
    {% endif %}

[gcode_macro CG28]
description: Conditionally home XYZ if has not been homed before Perams: NONE
gcode:
    {action_respond_info("running Conditional G28...")}
    {% if "xyz" not in printer.toolhead.homed_axes %}
        {action_respond_info("Doing a full G28 as the printer has not been homed before. CURRENT STATE: %s" % (printer.toolhead.homed_axes))}
        ## LIGHTS PRESET=BUSY                                                                                                  ; Turn on the lights and set to busy
        G28                                                                                                                 ; Home All Axes
    {% else %}
        {action_respond_info("Printer already homed. CURRENT STATE: %s" % (printer.toolhead.homed_axes))}
    {% endif %}

#####################################################################
#       MISC
#####################################################################

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
    {action_respond_info("running M109...")}
    #Parameters
    {% set s = params.S|float %}
    
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}
    {action_respond_info("leaving M109...")}
	{action_respond_info("waiting for extruder temp...")}
	

[gcode_macro RESETSPEEDS]
gcode:
    {action_respond_info("ESETSPEEDS...")}
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 


[gcode_macro HEATSOAK]
gcode:
    # Parameters
    {% set t = params.T|default(50)|int %}
	{% set t = params.T|default(50)|int %}
    {% set move = params.MOVE|default(1)|int %}
	M118 Heatsoak {t} 
	M118 hotend={printer.extruder.temperature}
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0  							; cancel off timer (if there is one)
    ##SET_FAN_SPEED FAN=Exhaust SPEED=0             							; turn off exhaust fan
    ##SET_PIN PIN=caselight VALUE=1                 							; turn on case light
    M140 S{t}                                   								; heat bed
    {% if t >= 100 %}
		{% if printer.extruder.temperature < 180 %}
			M118 Extruder Temp to 180
			M104 S180															; set hotend to no-ooze temp	
			M106 S205															; turn on part fan (80%)
		{% endif %}	
    {% else %}
        M106 S0                                     							; turn part fan off
    {% endif %}
    {% if move == 1 %}
        CG28                                        							; conditional home
    {% endif %}


[gcode_macro BEEP]
gcode:
	{action_respond_info("executing BEEP")}
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
        G4 P{dur}
        SET_PIN PIN=beeper VALUE=0
        G4 P{dur}
    {% endfor %}
    
######################### LCD RGB CONTROLS #########################

# Set LCD RGB at startup
[delayed_gcode SETDISPLAYNEOPIXEL]
initial_duration: 1
gcode:
    ##RESETRGB
    
# Default RGB
[gcode_macro RESETRGB]
gcode:
    SET_LED LED=lcd RED=1 GREEN=0.45 BLUE=0.4 INDEX=1 TRANSMIT=0
    SET_LED LED=lcd RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=2 TRANSMIT=0
    SET_LED LED=lcd RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=3

# Example LCDRGB R=1 G=0.5 B=0
[gcode_macro LCDRGB]
gcode:
    {% set r = params.R|default(1)|float %}
    {% set g = params.G|default(1)|float %}
    {% set b = params.B|default(1)|float %}

    SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=1 TRANSMIT=0
    SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=2 TRANSMIT=0
    SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=3
    
######################### FILAMENT #########################

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=UNLOADFILAMENT
    M83                                   ; set extruder to relative
    G1 E10 F600                           ; extrude a little to soften tip 
    G1 E-120 F1800                        ; retract filament completely
    RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=LOADFILAMENT
    M83 ; set extruder to relative
    G1 E90 F600
    RESTORE_GCODE_STATE NAME=LOADFILAMENT
   
[gcode_macro HOT_UNLOAD]
gcode:
    # Parameters
    {% set t = params.T|default(240)|int %}
    
    M104 S{t}
    PARKFRONT
    M109 S{t}
    UNLOAD_FILAMENT
    
[gcode_macro HOT_LOAD]
gcode:
    # Parameters
    {% set t = params.T|default(240)|int %}
    
    M104 S{t}
    PARKFRONT
    M109 S{t}
    LOAD_FILAMENT

  
######################### PARKING #########################

# Park front center
[gcode_macro PARKFRONT]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500        
    RESTORE_GCODE_STATE NAME=PARKFRONT
    
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F19500                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT
    
# Park top rear left
[gcode_macro PARKREAR]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKREAR
    G90
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500    
    RESTORE_GCODE_STATE NAME=PARKCENTER
    
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    CG28
    SAVE_GCODE_STATE NAME=PARKBED
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z100 F19500                                     
    RESTORE_GCODE_STATE NAME=PARKBED
    
######################### ALIASES/SHORTCUTS #########################

    
[gcode_macro BMC]
gcode:
	{action_respond_info("BMC")}
    BED_MESH_CALIBRATE

[gcode_macro QGL]
gcode:
    {action_respond_info("QGL")}
    CG28
    BED_MESH_CLEAR
    QUAD_GANTRY_LEVEL
    G28 Z


# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
## [gcode_macro OFF]
## gcode:
##     M84                                  ; turn steppers off
##     TURN_OFF_HEATERS                     ; turn bed / hotend off
##     M107                                 ; turn print cooling fan off
##     SET_FAN_SPEED FAN=Exhaust SPEED=0    ; turn exhaust fan off
##     SET_FAN_SPEED FAN=BedOuter SPEED=0   ; bed fan off
##     SET_FAN_SPEED FAN=BedInner SPEED=0   ; bed fan off
##     SET_PIN PIN=caselight VALUE=0        ; turn light off
    
######################### TESTING #########################

# Dump all Klipper parameters to terminal, helps find names and values of variables for use in macros

[gcode_macro DUMP_PARAMETERS]
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s" % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}




#####################################################################
#       BED MESH
#####################################################################

[gcode_macro ADAPTIVE_BED_MESH_3]
description: Perform a bed mesh, but only where and when it's needed[bed_mesh]

gcode:
	M118 Bed Mesh Calibration
	speed: 300
	horizontal_move_z: 10
	##  Uncomment below for 250mm build
	#mesh_min: 40, 40
	#mesh_max: 210,210
	##  Uncomment for 300mm build
	#mesh_min: 40, 40
	#mesh_max: 260,260
	##  Uncomment for 350mm build
	mesh_min: 40, 40
	mesh_max: 310,310
	fade_start: 0.6
	fade_end: 10.0
	probe_count: 5,5
	mesh_pps: 2,2
	algorithm: bicubic
	relative_reference_index: 12



[gcode_macro ADAPTIVE_BED_MESH]
description: Perform a bed mesh, but only where and when it's needed
gcode:
    # 1 ----- GET ORIGINAL BEDMESH PARAMS FROM CONFIG ----------------------
    {% set xMinConf, yMinConf = printer["configfile"].config["bed_mesh"]["mesh_min"].split(',')|map('trim')|map('int') %}
    {% set xMaxConf, yMaxConf = printer["configfile"].config["bed_mesh"]["mesh_max"].split(',')|map('trim')|map('int') %}
    {% set xProbeCntConf, yProbeCntConf = printer["configfile"].config["bed_mesh"]["probe_count"].split(',')|map('trim')|map('int') %}
    {% set algo = printer["configfile"].config["bed_mesh"]["algorithm"] %}
    {% set xMeshPPS, yMeshPPS = printer["configfile"].config["bed_mesh"]["mesh_pps"].split(',')|map('trim')|map('int') %}
    # If the SIZE parameter is defined and set not a dummy placeholder, we do the adaptive
    # bed mesh logic. If it's ommited, we still do the original BED_MESH_CALIBRATE function
    {% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}

        # 2 ----- GET MESH SIZE AND MARGIN FROM MACRO CALL --------------------
        {% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
        {% set margin = params.MARGIN|default(5)|int %}

        # 3 ----- APPLY MARGINS ----------------------------------------------
        # We use min/max function as we want it to be constrained by the original
        # bedmesh size. This will avoid going outside the machine limits
        {% set xMin = [xMinConf, (xMinSpec - margin)]|max %}
        {% set xMax = [xMaxConf, (xMaxSpec + margin)]|min %}
        {% set yMin = [yMinConf, (yMinSpec - margin)]|max %}
        {% set yMax = [yMaxConf, (yMaxSpec + margin)]|min %}

        # 4 ----- COMPUTE A NEW PROBE COUNT ----------------------------------
        # The goal is to have at least the same precision as from the config. So we compute an equivalent number
        # of probe points on each X/Y dimensions (distance between two points should be the same as in the config)
        {% set xProbeCnt = ((xMax - xMin) * xProbeCntConf / (xMaxConf - xMinConf))|round(0, 'ceil')|int %}
        {% set yProbeCnt = ((yMax - yMin) * yProbeCntConf / (yMaxConf - yMinConf))|round(0, 'ceil')|int %}

        # Then, three possibilities :
        # a) Both dimensions have less than 3 probe points : the bed_mesh is not needed as it's a small print.
        # b) If one of the dimension is less than 3 and the other is greater. The print looks to be elongated and
        #    need the adaptive bed_mesh : we add probe points to the small direction to reach 3 and be able to do it.
        # c) If both direction are greater than 3, we need the adaptive bed_mesh and it's ok.
        # At the end we control (according to Klipper bed_mesh method: "_verify_algorithm") that the computed probe_count is
        # valid according to the choosen algorithm or change it if needed.
        {% if xProbeCnt < 3 and yProbeCnt < 3 %}
            RESPOND MSG="Adaptive bed mesh: mesh not needed"
            
        {% else %}
            {% set xProbeCnt = [3, xProbeCnt]|max %}
            {% set yProbeCnt = [3, yProbeCnt]|max %}

            # We verify that the number of probe points on each axis is odd or add
            # one to it. This is to have a relative_reference_index point at the center of the mesh
            {% if xProbeCnt % 2 == 0 %}
                {% set xProbeCnt = xProbeCnt + 1 %}
            {% endif %}
            {% if yProbeCnt % 2 == 0 %}
                {% set yProbeCnt = yProbeCnt + 1 %}
            {% endif %}

            # Check of the probe points and interpolation algorithms according to Klipper code
            {% if xMeshPPS != 0 or yMeshPPS != 0 %}
                {% set probeCntMin = [xProbeCnt, yProbeCnt]|min %}
                {% set probeCntMax = [xProbeCnt, yProbeCnt]|max %}
                {% if algo == "lagrange" and probeCntMax > 6 %}
                    # Lagrange interpolation tends to oscillate when using more than 6 samples: swith to bicubic
                    {% set algo = "bicubic" %}
                {% endif %}
                {% if algo == "bicubic" and probeCntMin < 4 %}
                    {% if probeCntMax > 6 %}
                        # Impossible case: need to add probe point on the small axis to be >= 4 (we want 5 to keep it odd)
                        {% if xProbeCnt > yProbeCnt %}
                            {% set yProbeCnt = 5 %}
                        {% else %}
                            {% set xProbeCnt = 5 %}
                        {% endif %}
                    {% else %}
                        # In this case bicubic is not adapted (less than 4 points): switch to lagrange
                        {% set algo = "lagrange" %}
                    {% endif %}
                {% endif %}
            {% endif %}

            # 5 ----- COMPUTE THE RELATIVE_REFERENCE_INDEX POINT --------------------
            {% set rRefIndex = (((xProbeCnt * yProbeCnt) - 1) / 2)|int %}

            # 6 ----- FORMAT THE PARAMETERS TO CALL BED_MESH_CALIBRATE --------------
            {% set mesh_min = "%d,%d"|format(xMin, yMin) %}
            {% set mesh_max = "%d,%d"|format(xMax, yMax) %}
            {% set probe_count = "%d,%d"|format(xProbeCnt, yProbeCnt) %}
            RESPOND MSG="Adaptive bed mesh: MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}"
            BED_MESH_CALIBRATE MESH_MIN={mesh_min} MESH_MAX={mesh_max} PROBE_COUNT={probe_count} RELATIVE_REFERENCE_INDEX={rRefIndex} ALGORITHM={algo}
        {% endif %}
    {% else %}
        RESPOND MSG="Adaptive bed mesh: nominal bed mesh"
        BED_MESH_CALIBRATE
    {% endif %}
	
# This macro will allow you to type search_vars s={some word} from the terminal and
# it will respond with all of the matching items in the printer Object.
# Say I wanted to know what the name and path of for the value of the currently loaded bed
# mesh. I could do type search_vars s=profile in my terminal and it will respond with 
# any items containing the word ‘profile’.
# 
#   $ SEARCH_VARS s="profile"
#   // printer.bed_mesh.profile_name : default
# 
[gcode_macro SEARCH_VARS]
# Search like 'SEARCH_VARS s="profile"'
gcode:
    {% if not params.S %}
        {action_respond_info("hmm.. try 'SEARCH_VARS s=\"profile\"'")}
    {% else %}
        {% set resultcount = namespace(total=0) %}
        {% set search = params.S|lower %}
        {% set ns = namespace() %}
        {% for item in printer  %}
            {% if ' ' in item %}
                {% set ns.path = ['printer', "['%s']" % (item), ''] %}
            {% else %}
                {% set ns.path = ['printer.', item, ''] %}   
            {% endif %} 
    
            {% if search in ns.path|lower %}
                { action_respond_info(ns.path|join) }
                {% set resultcount.total = 1 + resultcount.total %}
            {% endif %} 
    
            {% if printer[item].items() %}
                {% for childkey, child in printer[item].items() recursive %}
                    {% set ns.path = ns.path[:loop.depth|int + 1] %}
    
                    {% if ' ' in childkey %}
                        {% set null = ns.path.append("['%s']" % (childkey)) %}
                    {% else %}
                        {% set null = ns.path.append(".%s" % (childkey)) %}
                    {% endif %} 
    
                    {% if child is mapping  %}
                        { loop(child.items()) }
                    {% else %}
                        {% if search in ns.path|lower %}
                            { action_respond_info("%s : %s" % (ns.path|join, child)) }
                            {% set resultcount.total = 1 + resultcount.total %}
                        {% endif %} 
                    {% endif %} 
                    
                {% endfor %}
            {% endif %} 
        {% endfor %}
        {% if resultcount.total >= 1 %}
            {action_respond_info("found \"" + params.S + "\" " + resultcount.total|string +" times.")}
        {% else %}
            {action_respond_info("\"" + params.S + "\" not found.")}
        {% endif %} 
        {% set resultcount.total = 0|int %}
    {% endif %} 


[gcode_macro M486]
gcode:
	# Parameters known to M486 are as follows:
	#   [C<flag>] Cancel the current object
	#   [P<index>] Cancel the object with the given index
	#   [S<index>] Set the index of the current object.
	#       If the object with the given index has been canceled, this will cause
	#       the firmware to skip to the next object. The value -1 is used to
	#       indicate something that isn’t an object and shouldn’t be skipped.
	#   [T<count>] Reset the state and set the number of objects
	#   [U<index>] Un-cancel the object with the given index. This command will be
	#       ignored if the object has already been skipped

	{% if 'exclude_object' not in printer %}
		{action_raise_error("[exclude_object] is not enabled")}
	{% endif %}

	{% if 'T' in params %}
		EXCLUDE_OBJECT RESET=1
		{% for i in range(params.T | int) %}
			EXCLUDE_OBJECT_DEFINE NAME={i}
		{% endfor %}
	{% endif %}

	{% if 'C' in params %}
		EXCLUDE_OBJECT CURRENT=1
	{% endif %}

	{% if 'P' in params %}
		EXCLUDE_OBJECT NAME={params.P}
	{% endif %}

	{% if 'S' in params %}
		{% if params.S == '-1' %}
			{% if printer.exclude_object.current_object %}
				EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
			{% endif %}
		{% else %}
			EXCLUDE_OBJECT_START NAME={params.S}
		{% endif %}
	{% endif %}

	{% if 'U' in params %}
		EXCLUDE_OBJECT RESET=1 NAME={params.U}
	{% endif %}
